# ddos_attack_sequence.yml
- name: Build and run DDoS attack simulation
  hosts: localhost
  vars_prompt:
    - name: selected_attacks
      prompt: "Enter the attacker names you want to run (comma-separated)"
      private: no
  vars:
    attack_duration: 30
    attack_list:
      - name: attacker-benign
        path: attacks/attacker-benign
      - name: attacker-goldeneye
        path: attacks/attacker-goldeneye
      - name: attacker-loic-http
        path: attacks/attacker-loic-http
      - name: attacker-slowhttp
        path: attacks/attacker-slowhttp
      - name: attacker-slowloris
        path: attacks/attacker-slowloris
    victim_image: victim-server
    victim_path: victim-server
  tasks:

    - name: Build victim Docker image
      shell: docker build -t {{ victim_image }} {{ victim_path }}

    - name: Remove existing victim container (if any)
      shell: docker rm -f victim_server || true
    
    - name: Delete previous attack timeline log
      file:
        path: out/attack_timeline.csv
        state: absent
    
    - name: Save tcpdump start timestamp
      shell: |
        now_date=$(date -u +"%Y%m%d%H%M%S")
        now_ms=$(python3 -c "from datetime import datetime; print(f'{datetime.utcnow().microsecond // 1000:03d}')")
        now="${now_date}${now_ms}"
        echo "$now,start" >> out/attack_timeline.csv

    - name: Start victim container
      shell: |
        docker run -d \
          --name victim_server \
          --network host \
          -p 80:80 \
          -v "{{ playbook_dir }}/out:/output" \
          {{ victim_image }}

    - name: Run attacker simulations
      include_tasks: tasks/run_attack.yml
      loop: "{{ attack_list | selectattr('name', 'in', selected_attacks.split(',') | map('trim') | list) }}"
      loop_control:
        loop_var: attack

    - name: Wait 10 seconds before shutting down the victim
      pause:
        seconds: 10

    - name: Stop and remove victim container
      shell: |
        docker rm -f victim_server || true

    - name: Remove existing pcap-to-csv container (if any)
      shell: docker rm -f pcap-to-csv || true

    - name: Build pcap-to-csv image
      shell: docker build -t pcap-to-csv pcap-to-csv/

    - name: Start pcap-to-csv container
      shell: |
        docker run -d \
        --name pcap-to-csv \
        -v "{{ playbook_dir }}/out:/output" \
        pcap-to-csv

